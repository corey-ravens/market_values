



/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

This is the code for turning the player market values into model grades.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

(1)


Create the list of players to give a grade to.  Only players who appeared on a roster or practice squad get one.

Use this as your universe for grade distrubutions too.

OUTPUT TABLES:
#temp_actives

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_games exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_games') IS NOT NULL
	DROP TABLE #temp_games

	SELECT gs.nfl_game_key
		,gs.nfl_player_id
		,gs.club_id
		,gs.season
		,gs.season_type
		,[week]
		,status_roster_simple
		,status_game_played
		,active_game_count
		,injury_status_week
		,ISNULL(pt.snap_count_offense + pt.snap_count_defense,0) AS snap_count_od
	INTO #temp_games
	FROM Analytics.dbo.analysis_players_gameweek_status gs
	LEFT JOIN Analytics.dbo.stage_players_game_playtime pt
		ON gs.nfl_game_key = pt.nfl_game_key
		AND gs.nfl_player_id = pt.nfl_player_id 
	WHERE gs.season >= 2011
		AND gs.season_type in ('Reg', 'Post')
	ORDER BY nfl_player_id
		,nfl_game_week_begin

--#Here GamesRostered is the total potential games rostered for that player when they are signed to a team and not a FA or on WAIVERS.

-- Check if #temp_actives exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_actives') IS NOT NULL
	DROP TABLE #temp_actives

	SELECT nfl_player_id
		,season
		,SUM(CASE WHEN nfl_game_key IS NOT NULL AND status_roster_simple IN ('ACTIVE') THEN 1 ELSE 0 END) AS active_weeks
		,SUM(CASE WHEN nfl_game_key IS NOT NULL AND status_roster_simple IN ('ACTIVE') AND UPPER(status_game_played) IN ('STARTED') THEN 1 ELSE 0 END) AS started_weeks
		,SUM(CASE WHEN nfl_game_key IS NOT NULL AND status_roster_simple IN ('ACTIVE') AND UPPER(status_game_played) IN ('STARTED','PLAYED','SUBSTITUTE') THEN 1 ELSE 0 END) AS played_weeks
		,SUM(CASE WHEN nfl_game_key IS NOT NULL AND status_roster_simple IN ('ACTIVE','INACTIVE','INJURED','RESERVE','PRACTICESQUAD','SUSPENDED') THEN 1 ELSE 0 END) AS rostered_weeks
		,SUM(CASE WHEN nfl_game_key IS NOT NULL AND status_roster_simple IN ('ACTIVE','INACTIVE') THEN 1 ELSE 0 END) AS on_53_weeks
		,SUM(CASE WHEN nfl_game_key IS NOT NULL AND status_roster_simple IN ('SUSPENDED') THEN 1 ELSE 0 END) AS suspended_weeks
		,SUM(CASE WHEN nfl_game_key IS NOT NULL AND status_roster_simple IN ('PUP') THEN 1 ELSE 0 END) AS pup_weeks
		,SUM(CASE WHEN nfl_game_key IS NOT NULL AND (status_roster_simple IN ('INJURED') OR (status_roster_simple IN ('INACTIVE') AND injury_status_week IS NOT NULL)) THEN 1 ELSE 0 END) AS injured_weeks
		,SUM(CASE WHEN status_roster_simple IN ('FREEAGENT') THEN 1 ELSE 0 END) AS free_agent_weeks
		,SUM(CASE WHEN status_roster_simple IN ('RETIRED') THEN 1 ELSE 0 END) AS retired_weeks
		,SUM(snap_count_od) AS snap_count_od
	INTO #temp_actives
	FROM #temp_games
	GROUP BY nfl_player_id
		,season


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

(2)


Create a table with all the scout grades and positions.

Only use quarterly if a player doesn't have an advance or an ability for ravens grade, only use advance if he doesn't have an ability for ravens grade.

OUTPUT TABLES:
#temp_grades_scouts

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_grades_scouts exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_grades_scouts') IS NOT NULL
DROP TABLE #temp_grades_scouts

	SELECT re.id AS report_id
		,gr.id
		,UPPER(re.[type]) AS report_type
		,CASE WHEN UPPER(re.[type]) IN ('ABILITY FOR RAVENS') THEN 1
			WHEN UPPER(re.[type]) IN ('GAME ADVANCE') THEN 2
			WHEN UPPER(re.[type]) IN ('QUARTERLY') THEN 3
			ELSE NULL
			END AS report_priority
		,RANK() OVER (PARTITION BY player_id, CASE WHEN MONTH(re.created_at) < 8 OR (MONTH(re.created_at) = 8 AND DAY(re.created_at) < 15) THEN YEAR(re.created_at) - 1  ELSE YEAR(re.created_at) END ORDER BY CASE WHEN UPPER(re.[type]) IN ('ABILITY FOR RAVENS') THEN 1 WHEN UPPER(re.[type]) IN ('GAME ADVANCE') THEN 2 WHEN UPPER(re.[type]) IN ('QUARTERLY') THEN 3 ELSE NULL END) AS report_importance
		,author_id AS scout_id
		,player_id AS bane_player_id
		,pl.nfl_id AS nfl_player_id
		,CASE WHEN MONTH(re.created_at) < 8 OR (MONTH(re.created_at) = 8 AND DAY(re.created_at) < 15) THEN YEAR(re.created_at)-1 
			ELSE YEAR(re.created_at) END AS report_season
		--,ISNULL(rp.translation,po.translation) AS position_report
		,po.translation AS position_report
		,CAST(gr.value AS FLOAT) AS grade_bucket       
	INTO #temp_grades_scouts
	FROM [BaneProductionAnalytics].[dbo].[reports] re
	LEFT JOIN [BaneProductionAnalytics].[dbo].[grades] gr
		ON re.grade_id = gr.id
	INNER JOIN [BaneProductionAnalytics].[dbo].[players] pl 
		ON re.player_id = pl.id
		AND pl.is_deleted = 0
	LEFT JOIN [BaneProductionAnalytics].[dbo].[positions] po
		ON pl.position_id = po.id
	LEFT JOIN [BaneProductionAnalytics].[dbo].[positions] rp
		ON re.position_id = rp.id
	INNER JOIN [BaneProductionAnalytics].[dbo].[taggings] tir 
		ON tir.taggable_id = re.id 
		AND UPPER(tir.taggable_type)= 'REPORT'
		AND tir.tag_id = 1 -- (it is a pro report)
	LEFT JOIN [BaneProductionAnalytics].[dbo].[users] us
		ON re.author_id=us.id                
	WHERE 1 = 1
		AND re.is_deleted = 0
		AND gr.scale_id IN (6)
		AND UPPER(us.[type]) NOT LIKE '%COACH%'      
		AND UPPER(re.[type]) <> 'SPECIAL TEAMS' 
		AND UPPER(re.[type]) IN ('ABILITY FOR RAVENS','GAME ADVANCE','QUARTERLY')
 

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

(3)


Find the positional grade distribution.

As of 09/2020, manually set these thresholds based on looking at the data:

8.0 = Top 99%
7.0 = Top 95%
6.5 = Top 90%
6.3 = Top 80%
6.0 = Top 70%
5.9 = Top 50%
5.8 = Top 30%
5.7 = Top 15%
5.6 = players who weren't rostered for a game


OUTPUT TABLES:
#temp_grade_percentiles

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_active_grades exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_active_grades') IS NOT NULL
	DROP TABLE #temp_active_grades

	SELECT ac.nfl_player_id
		,season
		,report_season
		,position_report
		,MAX(grade_bucket) AS grade_bucket
	INTO #temp_active_grades
	FROM #temp_actives ac
	INNER JOIN #temp_grades_scouts gr
		ON ac.nfl_player_id = gr.nfl_player_id
		AND ac.season = gr.report_season
	WHERE report_importance = 1
		AND ac.on_53_weeks > 0
		AND ac.snap_count_od >= 100
	GROUP BY ac.nfl_player_id
		,season
		,report_season
		,position_report



-- Check if #temp_grade_percentiles exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_grade_percentiles') IS NOT NULL
	DROP TABLE #temp_grade_percentiles

	SELECT position_report
		,season
		,SUM(CASE WHEN grade_bucket = 8.0 THEN 1 ELSE 0 END) AS count_80
		,SUM(CASE WHEN grade_bucket >= 7.0 THEN 1 ELSE 0 END) AS count_70
		,SUM(CASE WHEN grade_bucket >= 6.9 THEN 1 ELSE 0 END) AS count_69
		,SUM(CASE WHEN grade_bucket >= 6.7 THEN 1 ELSE 0 END) AS count_67
		,SUM(CASE WHEN grade_bucket >= 6.5 THEN 1 ELSE 0 END) AS count_65
		,SUM(CASE WHEN grade_bucket >= 6.3 THEN 1 ELSE 0 END) AS count_63
		,SUM(CASE WHEN grade_bucket >= 6.0 THEN 1 ELSE 0 END) AS count_61
		,SUM(CASE WHEN grade_bucket >= 5.9 THEN 1 ELSE 0 END) AS count_59
		,SUM(CASE WHEN grade_bucket >= 5.8 THEN 1 ELSE 0 END) AS count_58
		,SUM(CASE WHEN grade_bucket >= 5.7 THEN 1 ELSE 0 END) AS count_57
		,SUM(CASE WHEN grade_bucket >= 5.6 THEN 1 ELSE 0 END) AS count_56
		,SUM(CASE WHEN grade_bucket >= 5.4 THEN 1 ELSE 0 END) AS count_54
		/*,(COUNT(*) - CAST(SUM(CASE WHEN grade_bucket = 8.0 THEN 1 ELSE 0 END) AS FLOAT)) / COUNT(*) AS percentile_80
		,(COUNT(*) - CAST(SUM(CASE WHEN grade_bucket >= 7.0 THEN 1 ELSE 0 END) AS FLOAT)) / COUNT(*) AS percentile_70
		,(COUNT(*) - CAST(SUM(CASE WHEN grade_bucket >= 6.9 THEN 1 ELSE 0 END) AS FLOAT)) / COUNT(*) AS percentile_69
		,(COUNT(*) - CAST(SUM(CASE WHEN grade_bucket >= 6.7 THEN 1 ELSE 0 END) AS FLOAT)) / COUNT(*) AS percentile_67
		,(COUNT(*) - CAST(SUM(CASE WHEN grade_bucket >= 6.5 THEN 1 ELSE 0 END) AS FLOAT)) / COUNT(*) AS percentile_65
		,(COUNT(*) - CAST(SUM(CASE WHEN grade_bucket >= 6.3 THEN 1 ELSE 0 END) AS FLOAT)) / COUNT(*) AS percentile_63
		,(COUNT(*) - CAST(SUM(CASE WHEN grade_bucket >= 6.0 THEN 1 ELSE 0 END) AS FLOAT)) / COUNT(*) AS percentile_61
		,(COUNT(*) - CAST(SUM(CASE WHEN grade_bucket >= 5.9 THEN 1 ELSE 0 END) AS FLOAT)) / COUNT(*) AS percentile_59
		,(COUNT(*) - CAST(SUM(CASE WHEN grade_bucket >= 5.8 THEN 1 ELSE 0 END) AS FLOAT)) / COUNT(*) AS percentile_58
		,(COUNT(*) - CAST(SUM(CASE WHEN grade_bucket >= 5.7 THEN 1 ELSE 0 END) AS FLOAT)) / COUNT(*) AS percentile_57
		,(COUNT(*) - CAST(SUM(CASE WHEN grade_bucket >= 5.6 THEN 1 ELSE 0 END) AS FLOAT)) / COUNT(*) AS percentile_56
		,(COUNT(*) - CAST(SUM(CASE WHEN grade_bucket >= 5.4 THEN 1 ELSE 0 END) AS FLOAT)) / COUNT(*) AS percentile_54*/
	--INTO #temp_grade_percentiles
	FROM #temp_active_grades
	WHERE 1 = 1
		AND report_season >= 2017 AND report_season < 2020
		--AND grade_bucket >= 5.6
	GROUP BY position_report
		,season


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

(4)


Find the gradeless market value percentiles and ranks.

OUTPUT TABLES:
#temp_model_predictions

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

	-- Check if #temp_league_salary_cap exists, if it does drop it
	IF OBJECT_ID('tempdb..#temp_league_salary_cap') IS NOT NULL
		DROP TABLE #temp_league_salary_cap

	SELECT DISTINCT season
			,league_salary_cap
	INTO #temp_league_salary_cap
	FROM [BaneProductionAnalytics].[dbo].[league_salary_cap_summaries]


-- Check if #temp_model_predictions exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_model_predictions') IS NOT NULL
	DROP TABLE #temp_model_predictions

	SELECT ac.nfl_player_id
		,mv.bane_player_id
		,mv.player
		,pl.birth_date
		,mv.season
		,on_53_weeks
		,CASE WHEN po.team = 'defense' THEN 
			CASE WHEN po.translation = 'DS' AND ISNULL(de.position_blt,po.translation) IN ('SAM','MIKE','WILL') THEN 'DS'
				WHEN ISNULL(de.position_blt,po.translation) IN ('RUSH','SAM','OB34','DE43','OB') THEN 'EDGE'
				WHEN ISNULL(de.position_blt,po.translation) IN ('IB','MIKE','WILL') THEN 'IB'
				WHEN ISNULL(de.position_blt,po.translation) IN ('NT','DT3T') THEN 'DT'
				WHEN ISNULL(de.position_blt,po.translation) IN ('SS','FS') THEN 'DS'
				WHEN ISNULL(de.position_blt,po.translation) IN ('DC','CB','NB') THEN 'CB'
				ELSE ISNULL(de.position_blt,po.translation)
			END
		 WHEN po.team = 'offense' THEN
			CASE WHEN ISNULL(ofp.position_blt,po.translation) = 'WR' THEN CASE WHEN ofp.receiver_type IN ('SLOT','INSIDE') THEN 'SLOT' ELSE ISNULL(ofp.receiver_type,'WIDE') END
				WHEN ISNULL(ofp.position_blt,po.translation) IN ('LOT','ROT','OT') THEN 'OT'
				WHEN ISNULL(ofp.position_blt,po.translation) IN ('LOG','ROG','OG') THEN 'OG'
				WHEN ISNULL(ofp.position_blt,po.translation) IN ('RB','FB') THEN 'RB'
				ELSE ISNULL(ofp.position_blt,po.translation)
			END
		END AS position_blt
		,mv.predicted_apy_percent
		,mv.predicted_apy_percent * sc.league_salary_cap AS predicted_apy_dollars
	INTO #temp_model_predictions
	FROM #temp_actives ac
	INNER JOIN [Analytics].[dbo].[analysis_players_market_values_gradeless] mv
		ON ac.nfl_player_id = mv.nfl_player_id
		AND ac.season = mv.season
	INNER JOIN BaneProductionAnalytics.dbo.players pl
		ON ac.nfl_player_id = pl.nfl_id
		AND pl.is_deleted = 0
	INNER JOIN BaneProductionAnalytics.dbo.positions po
		ON pl.position_id = po.id
	INNER JOIN #temp_league_salary_cap sc
		ON mv.season = sc.season
	LEFT JOIN Analytics.dbo.analysis_players_season_position_defense de
		ON mv.nfl_player_id = de.nfl_player_id
		AND de.defense_type = 'ALL'
		AND de.season_type_adjusted = 'REGPOST'
		AND mv.season = de.season
	LEFT JOIN Analytics.dbo.analysis_players_season_position_offense ofp
		ON mv.nfl_player_id = ofp.nfl_player_id
		AND ofp.season_type_adjusted = 'REGPOST'
		and mv.season = ofp.season
	WHERE mv.season = 2019
		AND snap_count_od >= 100
	ORDER BY mv.predicted_apy_percent DESC


-- Check if #temp_model_position_counts exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_model_position_counts') IS NOT NULL
	DROP TABLE #temp_model_position_counts

	SELECT season
		,position_blt
		,COUNT(*) AS position_count
	INTO #temp_model_position_counts
	FROM #temp_model_predictions
	GROUP BY season
		,position_blt


-- Check if #temp_model_prediction_ranks exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_model_prediction_ranks') IS NOT NULL
	DROP TABLE #temp_model_prediction_ranks

	SELECT mp.*
		,RANK() OVER (PARTITION BY mp.season, mp.position_blt ORDER BY predicted_apy_percent DESC) AS predicted_apy_rank
		,(position_count - RANK() OVER (PARTITION BY mp.season, mp.position_blt ORDER BY predicted_apy_percent DESC) + 1) / CAST(position_count AS FLOAT) AS predicted_apy_percentile
	INTO #temp_model_prediction_ranks
	FROM #temp_model_predictions mp
	INNER JOIN #temp_model_position_counts co
		ON mp.season = co.season
		AND mp.position_blt = co.position_blt
	--WHERE mp.position_blt IN ('CB')


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

(5)


Join to the grades tables so you can get grade ids and put into the same format as the existing 
draft model grades table.

OUTPUT TABLES:
#temp_pro_model_grades

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

-- Check if #temp_pro_model_grades exists, if it does drop it
IF OBJECT_ID('tempdb..#temp_pro_model_grades') IS NOT NULL
	DROP TABLE #temp_pro_model_grades
	
	SELECT bane_player_id
		,nfl_player_id
		,player
		,season
		,position_blt
		,predicted_apy_percent
		,predicted_apy_percentile
		,predicted_apy_rank
		,CASE WHEN position_blt = 'QB' THEN
			CASE WHEN predicted_apy_rank <= 2 THEN '8.0'
				WHEN predicted_apy_rank <= 6 THEN '7.0'
				WHEN predicted_apy_rank <= 12 AND DATEDIFF(DD,birth_date,GETDATE()) / 365.2425 >= 29 THEN '6.7'
				WHEN predicted_apy_rank <= 12 AND DATEDIFF(DD,birth_date,GETDATE()) / 365.2425 < 29 THEN '6.9'
				WHEN predicted_apy_rank <= 20 THEN '6.3'
				WHEN predicted_apy_rank <= 30 AND DATEDIFF(DD,birth_date,GETDATE()) / 365.2425 >= 27 THEN '6.1'
				WHEN predicted_apy_rank <= 30 AND DATEDIFF(DD,birth_date,GETDATE()) / 365.2425 < 27 THEN '6.0'
				WHEN predicted_apy_rank <= 40 THEN '5.9'
				WHEN predicted_apy_percent >= 0.017 AND on_53_weeks = 0 THEN '5.7'
				WHEN predicted_apy_percent >= 0.017 THEN '5.8'
				WHEN on_53_weeks = 0 THEN '5.6'
				WHEN predicted_apy_percent >= 0.0162 THEN '5.7'
				ELSE '5.6'
			END
		WHEN position_blt = 'RB' THEN
			CASE WHEN predicted_apy_percent >= 0.09 THEN '8.0'
				WHEN predicted_apy_percent >= 0.07 THEN '7.0'
				WHEN predicted_apy_percent >= 0.055 AND DATEDIFF(DD,birth_date,GETDATE()) / 365.2425 >= 29 THEN '6.7'
				WHEN predicted_apy_percent >= 0.055 AND DATEDIFF(DD,birth_date,GETDATE()) / 365.2425 < 29 THEN '6.9'
				WHEN predicted_apy_percent >= 0.03 THEN '6.3'
				WHEN predicted_apy_percent >= 0.015 AND DATEDIFF(DD,birth_date,GETDATE()) / 365.2425 >= 27 THEN '6.1'
				WHEN predicted_apy_percent >= 0.015 AND DATEDIFF(DD,birth_date,GETDATE()) / 365.2425 < 27 THEN '6.0'
				WHEN predicted_apy_percent >= 0.011 THEN '5.9'
				WHEN predicted_apy_percent >= 0.0098 AND on_53_weeks = 0 THEN '5.7'
				WHEN predicted_apy_percent >= 0.0098 THEN '5.8'
				WHEN on_53_weeks = 0 THEN '5.6'
				WHEN predicted_apy_percent >= 0.008 THEN '5.7'
				ELSE '5.6'
			END
		WHEN position_blt = 'WR' THEN
			CASE WHEN predicted_apy_percent >= 0.084 THEN '8.0'
				WHEN predicted_apy_percent >= 0.075 THEN '7.0'
				WHEN predicted_apy_percent >= 0.060 AND DATEDIFF(DD,birth_date,GETDATE()) / 365.2425 >= 29 THEN '6.7'
				WHEN predicted_apy_percent >= 0.060 AND DATEDIFF(DD,birth_date,GETDATE()) / 365.2425 < 29 THEN '6.9'
				WHEN predicted_apy_percent >= 0.03 THEN '6.3'
				WHEN predicted_apy_percent >= 0.017 AND DATEDIFF(DD,birth_date,GETDATE()) / 365.2425 >= 27 THEN '6.1'
				WHEN predicted_apy_percent >= 0.017 AND DATEDIFF(DD,birth_date,GETDATE()) / 365.2425 < 27 THEN '6.0'
				WHEN predicted_apy_percent >= 0.01 THEN '5.9'
				WHEN predicted_apy_percent >= 0.007 AND on_53_weeks = 0 THEN '5.7'
				WHEN predicted_apy_percent >= 0.007 THEN '5.8'
				WHEN on_53_weeks = 0 THEN '5.6'
				WHEN predicted_apy_percent >= 0.006 THEN '5.7'
				ELSE '5.6'
			END
		WHEN position_blt = 'EDGE' THEN
			CASE WHEN predicted_apy_rank <= 2 THEN '8.0'
				WHEN predicted_apy_rank <= 6 THEN '7.0'
				WHEN predicted_apy_rank <= 14 AND DATEDIFF(DD,birth_date,GETDATE()) / 365.2425 >= 29 THEN '6.7'
				WHEN predicted_apy_rank <= 14 AND DATEDIFF(DD,birth_date,GETDATE()) / 365.2425 < 29 THEN '6.9'
				WHEN predicted_apy_rank <= 30 THEN '6.3'
				WHEN predicted_apy_rank <= 60 AND DATEDIFF(DD,birth_date,GETDATE()) / 365.2425 >= 27 THEN '6.1'
				WHEN predicted_apy_rank <= 60 AND DATEDIFF(DD,birth_date,GETDATE()) / 365.2425 < 27 THEN '6.0'
				WHEN predicted_apy_percent >= 0.017 THEN '5.9'
				WHEN predicted_apy_percent >= 0.012 AND on_53_weeks = 0 THEN '5.7'
				WHEN predicted_apy_percent >= 0.012 THEN '5.8'
				WHEN on_53_weeks = 0 THEN '5.6'
				WHEN predicted_apy_percent >= 0.008 THEN '5.7'
				ELSE '5.6'
			END
		WHEN position_blt = 'DS' THEN
			CASE WHEN predicted_apy_rank <= 2 THEN '8.0'
				WHEN predicted_apy_rank <= 6 THEN '7.0'
				WHEN predicted_apy_rank <= 14 AND DATEDIFF(DD,birth_date,GETDATE()) / 365.2425 >= 29 THEN '6.7'
				WHEN predicted_apy_rank <= 14 AND DATEDIFF(DD,birth_date,GETDATE()) / 365.2425 < 29 THEN '6.9'
				WHEN predicted_apy_rank <= 30 THEN '6.3'
				WHEN predicted_apy_percent >= 0.016 AND DATEDIFF(DD,birth_date,GETDATE()) / 365.2425 >= 27 THEN '6.1'
				WHEN predicted_apy_percent >= 0.016 AND DATEDIFF(DD,birth_date,GETDATE()) / 365.2425 < 27 THEN '6.0'
				WHEN predicted_apy_percent >= 0.0105 THEN '5.9'
				WHEN predicted_apy_percent >= 0.007 AND on_53_weeks = 0 THEN '5.7'
				WHEN predicted_apy_percent >= 0.007 THEN '5.8'
				WHEN on_53_weeks = 0 THEN '5.6'
				WHEN predicted_apy_percent >= 0.0059 THEN '5.7'
				ELSE '5.6'
			END
		END AS pro_model_grade
	INTO #temp_pro_model_grades
	FROM #temp_model_prediction_ranks
	WHERE position_blt IN ('QB','EDGE','DS','RB','SLOT','WIDE')

-- Manually update a few based on pro sequence

--QB Rivers
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.7
WHERE nfl_player_id = 28956

--QB Rodgers
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.7
WHERE nfl_player_id = 29851

--QB Wilson
UPDATE #temp_pro_model_grades
SET pro_model_grade = 8.0
WHERE nfl_player_id = 38605

--OB Jones
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.9
WHERE nfl_player_id = 38551

--OB Bosa
UPDATE #temp_pro_model_grades
SET pro_model_grade = 7.0
WHERE nfl_player_id = 47785

--OB Mack
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.9
WHERE nfl_player_id = 41231

--OB Watt
UPDATE #temp_pro_model_grades
SET pro_model_grade = 7.0
WHERE nfl_player_id = 44842

--OB Bennett
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.1
WHERE nfl_player_id = 34836

--OB Collins
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.3
WHERE nfl_player_id = 40000

--OB Lawrence
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.3
WHERE nfl_player_id = 41263

--OB Curry
UPDATE #temp_pro_model_grades
SET pro_model_grade = 5.9
WHERE nfl_player_id = 38589

--OB Hunter
UPDATE #temp_pro_model_grades
SET pro_model_grade = 8.0
WHERE nfl_player_id = 42431

--DS Thomas
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.7
WHERE nfl_player_id = 35453

--DS Simmons
UPDATE #temp_pro_model_grades
SET pro_model_grade = 8.0
WHERE nfl_player_id = 43387

--DS Jackson
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.9
WHERE nfl_player_id = 44925

--DS Byard
UPDATE #temp_pro_model_grades
SET pro_model_grade = 7.0
WHERE nfl_player_id = 43353

--DS Johnson
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.3
WHERE nfl_player_id = 44903

--DS Ward
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.3
WHERE nfl_player_id = 41256

--DS Jefferson
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.1
WHERE nfl_player_id = 40737

--DS Anthony Harris
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.3
WHERE nfl_player_id = 42830

--DS Reid
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.3
WHERE nfl_player_id = 46137

--DS Erik Harris
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.3
WHERE nfl_player_id = 39908

--RB Le'veon Bell
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.3
WHERE nfl_player_id = 39996

--RB Alvin Kamara
UPDATE #temp_pro_model_grades
SET pro_model_grade = 7.0
WHERE nfl_player_id = 44879

--RB Austin Ekeler
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.9
WHERE nfl_player_id = 45573

--RB Josh Jacobs
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.9
WHERE nfl_player_id = 47807

--RB Duke Johnson
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.3
WHERE nfl_player_id = 42420

--FB Kyle Juszczyk
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.3
WHERE nfl_player_id = 40078

--RB Dalvin Cook
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.9
WHERE nfl_player_id = 44853

--RB Ezekiel Elliott
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.9
WHERE nfl_player_id = 43293

--RB Nick Chubb
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.9
WHERE nfl_player_id = 46104

--RB David Johnson
UPDATE #temp_pro_model_grades
SET pro_model_grade = 5.9
WHERE nfl_player_id = 42429

--RB Gus Edwards
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.0
WHERE nfl_player_id = 46437

--RB Tony Pollard
UPDATE #temp_pro_model_grades
SET pro_model_grade = 6.0
WHERE nfl_player_id = 47911


SELECT *
FROM #temp_pro_model_grades
WHERE position_blt IN ('SLOT','WIDE')
ORDER BY predicted_apy_percent DESC


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------

(6)


Update the analysis table where the grades are stored.

OUTPUT TABLES:
Analytics.dbo.analysis_players_pro_model_grades

----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

--DELETE FROM Analytics.dbo.analysis_players_pro_model_grades
--INSERT INTO Analytics.dbo.analysis_players_pro_model_grades


	SELECT mg.bane_player_id
		,mg.nfl_player_id
		,mg.season
		,pro_model_grade AS legacy_grade
		,gr.id AS grade_id
		,GETDATE() AS created_date
	FROM #temp_pro_model_grades mg
	LEFT JOIN BaneProductionAnalytics.dbo.grades gr
		ON mg.pro_model_grade = gr.[value]
		AND gr.scale_id = 6
		AND gr.[name] NOT LIKE '%kick%'
		AND gr.active = 1
